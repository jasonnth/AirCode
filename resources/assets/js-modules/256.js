__d(function(e,o,n,s){"use strict";function r(e){var o=u(e);return o&&o.viewConfig&&("AndroidTextInput"===o.viewConfig.uiViewClassName||"RCTTextView"===o.viewConfig.uiViewClassName||"RCTTextField"===o.viewConfig.uiViewClassName)}var l=o(84),t=(o(55),o(92)),i=o(183),d=o(257),a=o(54),c=o(56),p=o(22),h=o(126),u=h.getInstanceFromNode,S=o(25),m=S.ScrollViewManager,R=o(18),b={mixins:[d.Mixin],scrollResponderMixinGetInitialState:function(){return{isTouching:!1,lastMomentumScrollBeginTime:0,lastMomentumScrollEndTime:0,observedScrollSinceBecomingResponder:!1,becameResponderWhileAnimating:!1}},scrollResponderHandleScrollShouldSetResponder:function(){return this.state.isTouching},scrollResponderHandleStartShouldSetResponder:function(e){var o=a.currentlyFocusedField();return"handled"===this.props.keyboardShouldPersistTaps&&null!=o&&e.target!==o},scrollResponderHandleStartShouldSetResponderCapture:function(e){var o=a.currentlyFocusedField(),n=this.props.keyboardShouldPersistTaps;return!(n&&"never"!==n||null==o||r(e.target))||this.scrollResponderIsAnimating()},scrollResponderHandleResponderReject:function(){},scrollResponderHandleTerminationRequest:function(){return!this.state.observedScrollSinceBecomingResponder},scrollResponderHandleTouchEnd:function(e){var o=e.nativeEvent;this.state.isTouching=0!==o.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(e)},scrollResponderHandleResponderRelease:function(e){this.props.onResponderRelease&&this.props.onResponderRelease(e);var o=a.currentlyFocusedField();!0===this.props.keyboardShouldPersistTaps||"always"===this.props.keyboardShouldPersistTaps||null==o||e.target===o||this.state.observedScrollSinceBecomingResponder||this.state.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(e),a.blurTextInput(o))},scrollResponderHandleScroll:function(e){this.state.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(e)},scrollResponderHandleResponderGrant:function(e){this.state.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(e),this.state.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},scrollResponderHandleScrollBeginDrag:function(e){this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(e)},scrollResponderHandleScrollEndDrag:function(e){this.props.onScrollEndDrag&&this.props.onScrollEndDrag(e)},scrollResponderHandleMomentumScrollBegin:function(e){this.state.lastMomentumScrollBeginTime=Date.now(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(e)},scrollResponderHandleMomentumScrollEnd:function(e){this.state.lastMomentumScrollEndTime=Date.now(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(e)},scrollResponderHandleTouchStart:function(e){this.state.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(e)},scrollResponderHandleTouchMove:function(e){this.props.onTouchMove&&this.props.onTouchMove(e)},scrollResponderIsAnimating:function(){return Date.now()-this.state.lastMomentumScrollEndTime<16||this.state.lastMomentumScrollEndTime<this.state.lastMomentumScrollBeginTime},scrollResponderGetScrollableNode:function(){return this.getScrollableNode?this.getScrollableNode():i.findNodeHandle(this)},scrollResponderScrollTo:function(e,o,n){if("number"==typeof e);else{var s=e||{};e=s.x,o=s.y,n=s.animated}c.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(),c.RCTScrollView.Commands.scrollTo,[e||0,o||0,!1!==n])},scrollResponderScrollToEnd:function(e){var o=!1!==(e&&e.animated);c.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(),c.RCTScrollView.Commands.scrollToEnd,[o])},scrollResponderScrollWithoutAnimationTo:function(e,o){this.scrollResponderScrollTo({x:e,y:o,animated:!1})},scrollResponderZoomTo:function(e,o){if(R(m&&m.zoomToRect,"zoomToRect is not implemented"),"animated"in e)var o=e.animated,e=babelHelpers.objectWithoutProperties(e,["animated"]);m.zoomToRect(this.scrollResponderGetScrollableNode(),e,!1!==o)},scrollResponderScrollNativeHandleToKeyboard:function(e,o,n){this.additionalScrollOffset=o||0,this.preventNegativeScrollOffset=!!n,c.measureLayout(e,i.findNodeHandle(this.getInnerViewNode()),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},scrollResponderInputMeasureAndScrollToKeyboard:function(e,o,n,s){var r=l.get("window").height;this.keyboardWillOpenTo&&(r=this.keyboardWillOpenTo.endCoordinates.screenY);var t=o-r+s+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(t=Math.max(0,t)),this.scrollResponderScrollTo({x:0,y:t,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},scrollResponderTextInputFocusError:function(e){},componentWillMount:function(){var e=this.props.keyboardShouldPersistTaps;p("boolean"!=typeof e,"'keyboardShouldPersistTaps={"+e+"}' is deprecated. Use 'keyboardShouldPersistTaps=\""+(e?"always":"never")+"\"' instead"),this.keyboardWillOpenTo=null,this.additionalScrollOffset=0,this.addListenerOn(t,"keyboardWillShow",this.scrollResponderKeyboardWillShow),this.addListenerOn(t,"keyboardWillHide",this.scrollResponderKeyboardWillHide),this.addListenerOn(t,"keyboardDidShow",this.scrollResponderKeyboardDidShow),this.addListenerOn(t,"keyboardDidHide",this.scrollResponderKeyboardDidHide)},scrollResponderKeyboardWillShow:function(e){this.keyboardWillOpenTo=e,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(e)},scrollResponderKeyboardWillHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(e)},scrollResponderKeyboardDidShow:function(e){e&&(this.keyboardWillOpenTo=e),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(e)},scrollResponderKeyboardDidHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(e)}},T={Mixin:b};n.exports=T},256);